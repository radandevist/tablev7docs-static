_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[55],{Jc0b:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/quick-start",function(){return n("fWm2")}])},fWm2:function(e,t,n){"use strict";n.r(t),n.d(t,"meta",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n("HALo"),o=n("dhJC"),r=n("q1tI"),l=n.n(r),c=n("7ljp"),b=n("er9C"),s=(l.a.createElement,{id:"quick-start",title:"Quick Start"}),i={meta:s},p=function(e){var t=e.children,n=Object(o.a)(e,["children"]);return Object(c.b)(b.a,Object(a.a)({meta:s},n),t)};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(c.b)(p,Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"At the heart of every React Table is the ",Object(c.b)("inlineCode",{parentName:"p"},"useTable")," hook and the table ",Object(c.b)("inlineCode",{parentName:"p"},"instance")," object that it returns. This ",Object(c.b)("inlineCode",{parentName:"p"},"instance")," object contains everything you'll need to build a table and interact with its state. This includes, but is not limited to:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Columns"),Object(c.b)("li",{parentName:"ul"},"Materialized Data"),Object(c.b)("li",{parentName:"ul"},"Sorting"),Object(c.b)("li",{parentName:"ul"},"Filtering"),Object(c.b)("li",{parentName:"ul"},"Grouping"),Object(c.b)("li",{parentName:"ul"},"Pagination"),Object(c.b)("li",{parentName:"ul"},"Expanded State"),Object(c.b)("li",{parentName:"ul"},"Any functionality provided by custom plugin hooks, too!")),Object(c.b)("p",null,"In React Table, ",Object(c.b)("strong",{parentName:"p"},"you the developer")," are responsible for rendering the UI (markup and styles) of your table, but don't let that intimidate you! Table UIs are fun and React Table exists to make the process much easier to wire up your own table UI."),Object(c.b)("p",null,"To show you how this works. Let's start with a very basic table example."),Object(c.b)("h2",{id:"getting-your-data"},"Getting your data",Object(c.b)("a",Object(a.a)({parentName:"h2"},{href:"#getting-your-data",title:"Direct link to heading",className:"anchor"}),Object(c.b)("span",Object(a.a)({parentName:"a"},{className:"icon icon-link"})))),Object(c.b)("p",null,"When thinking about a table structure, you typically have ",Object(c.b)("strong",{parentName:"p"},"rows")," which contain ",Object(c.b)("strong",{parentName:"p"},"columns"),". While table configurations can get far more complex with nested columns, subrows, etc. for this basic quick start, we need to define some data that resembles this structure."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const data = React.useMemo(\n  () => [\n    {\n      col1: 'Hello',\n      col2: 'World',\n    },\n    {\n      col1: 'react-table',\n      col2: 'rocks',\n    },\n    {\n      col1: 'whatever',\n      col2: 'you want',\n    },\n  ],\n  []\n)\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"It's important that we're using ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/hooks-reference.html#usememo"}),Object(c.b)("inlineCode",{parentName:"a"},"React.useMemo"))," here to ensure that our data isn't recreated on every render. If we didn't use ",Object(c.b)("inlineCode",{parentName:"p"},"React.useMemo"),", the table would think it was receiving new data on every render and attempt to recalculate a lot of logic every single time. Not cool!")),Object(c.b)("h2",{id:"define-columns"},"Define Columns",Object(c.b)("a",Object(a.a)({parentName:"h2"},{href:"#define-columns",title:"Direct link to heading",className:"anchor"}),Object(c.b)("span",Object(a.a)({parentName:"a"},{className:"icon icon-link"})))),Object(c.b)("p",null,"Now that we have some data, let's create a set of ",Object(c.b)("strong",{parentName:"p"},"column definitions")," to pass into the ",Object(c.b)("inlineCode",{parentName:"p"},"useTable")," hook."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const columns = React.useMemo(\n  () => [\n    {\n      Header: 'Column 1',\n      accessor: 'col1', // accessor is the \"key\" in the data\n    },\n    {\n      Header: 'Column 2',\n      accessor: 'col2',\n    },\n  ],\n  []\n)\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Again, we're using ",Object(c.b)("inlineCode",{parentName:"p"},"React.useMemo")," so React Table doesn't recalculate the universe on every single render. Only when the memoized value actually changes!")),Object(c.b)("h2",{id:"using-the-usetable-hook"},"Using the ",Object(c.b)("inlineCode",{parentName:"h2"},"useTable")," hook",Object(c.b)("a",Object(a.a)({parentName:"h2"},{href:"#using-the-usetable-hook",title:"Direct link to heading",className:"anchor"}),Object(c.b)("span",Object(a.a)({parentName:"a"},{className:"icon icon-link"})))),Object(c.b)("p",null,"Now that you have some data and columns defined, we can pass those into the ",Object(c.b)("inlineCode",{parentName:"p"},"useTable")," hook to create a table instance."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const tableInstance = useTable({ columns, data })\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},Object(c.b)("inlineCode",{parentName:"p"},"useTable")," at the very least needs to be provided with an object containing the memoized ",Object(c.b)("inlineCode",{parentName:"p"},"columns")," and ",Object(c.b)("inlineCode",{parentName:"p"},"data"),".")),Object(c.b)("h2",{id:"building-a-basic-table-ui"},"Building a basic table UI",Object(c.b)("a",Object(a.a)({parentName:"h2"},{href:"#building-a-basic-table-ui",title:"Direct link to heading",className:"anchor"}),Object(c.b)("span",Object(a.a)({parentName:"a"},{className:"icon icon-link"})))),Object(c.b)("p",null,"Nice! We have our table instance and we're almost there! However, we still don't have any table markup or styles to show, right?"),Object(c.b)("p",null,"Let's build a basic table structure using just HTML for now:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"return (\n  <table>\n    <thead>\n      <tr>\n        <th></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td></td>\n      </tr>\n    </tbody>\n  </table>\n)\n")),Object(c.b)("h2",{id:"applying-the-table-instance-to-markup"},"Applying the table instance to markup",Object(c.b)("a",Object(a.a)({parentName:"h2"},{href:"#applying-the-table-instance-to-markup",title:"Direct link to heading",className:"anchor"}),Object(c.b)("span",Object(a.a)({parentName:"a"},{className:"icon icon-link"})))),Object(c.b)("p",null,"Now that we have our table structure, we can use the ",Object(c.b)("inlineCode",{parentName:"p"},"tableInstance")," to make it come to life!"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const tableInstance = useTable({ columns, data })\n\nconst {\n  getTableProps,\n  getTableBodyProps,\n  headerGroups,\n  rows,\n  prepareRow,\n} = tableInstance\n\nreturn (\n  // apply the table props\n  <table {...getTableProps()}>\n    <thead>\n      {// Loop over the header rows\n      headerGroups.map(headerGroup => (\n        // Apply the header row props\n        <tr {...headerGroup.getHeaderGroupProps()}>\n          {// Loop over the headers in each row\n          headerGroup.headers.map(column => (\n            // Apply the header cell props\n            <th {...column.getHeaderProps()}>\n              {// Render the header\n              column.render('Header')}\n            </th>\n          ))}\n        </tr>\n      ))}\n    </thead>\n    {/* Apply the table body props */}\n    <tbody {...getTableBodyProps()}>\n      {// Loop over the table rows\n      rows.map(row => {\n        // Prepare the row for display\n        prepareRow(row)\n        return (\n          // Apply the row props\n          <tr {...row.getRowProps()}>\n            {// Loop over the rows cells\n            row.cells.map(cell => {\n              // Apply the cell props\n              return (\n                <td {...cell.getCellProps()}>\n                  {// Render the cell contents\n                  cell.render('Cell')}\n                </td>\n              )\n            })}\n          </tr>\n        )\n      })}\n    </tbody>\n  </table>\n)\n")),Object(c.b)("h2",{id:"final-result"},"Final Result",Object(c.b)("a",Object(a.a)({parentName:"h2"},{href:"#final-result",title:"Direct link to heading",className:"anchor"}),Object(c.b)("span",Object(a.a)({parentName:"a"},{className:"icon icon-link"})))),Object(c.b)("p",null,"If we put all of this together, we should get a very basic (as well as temporarily ugly) table."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { useTable } from 'react-table'\n\nfunction App() {\n  const data = React.useMemo(\n    () => [\n      {\n        col1: 'Hello',\n        col2: 'World',\n      },\n      {\n        col1: 'react-table',\n        col2: 'rocks',\n      },\n      {\n        col1: 'whatever',\n        col2: 'you want',\n      },\n    ],\n    []\n  )\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n      },\n    ],\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data })\n\n  return (\n    <table {...getTableProps()} style={{ border: 'solid 1px blue' }}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th\n                {...column.getHeaderProps()}\n                style={{\n                  borderBottom: 'solid 3px red',\n                  background: 'aliceblue',\n                  color: 'black',\n                  fontWeight: 'bold',\n                }}\n              >\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return (\n                  <td\n                    {...cell.getCellProps()}\n                    style={{\n                      padding: '10px',\n                      border: 'solid 1px gray',\n                      background: 'papayawhip',\n                    }}\n                  >\n                    {cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n")),Object(c.b)("p",null,"Clearly this isn't ready to ship, but from a conceptual standpoint, you just learned the basics of using React Table!"))}u.isMDXComponent=!0}},[["Jc0b",0,2,1,3,4]]]);