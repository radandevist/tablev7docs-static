_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[12],{"E/Ri":function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/api/useExpanded",function(){return a("XXHg")}])},XXHg:function(e,t,a){"use strict";a.r(t),a.d(t,"meta",(function(){return p})),a.d(t,"default",(function(){return d}));var n=a("HALo"),i=a("dhJC"),l=a("q1tI"),o=a.n(l),b=a("7ljp"),r=a("er9C"),p=(o.a.createElement,{}),c={meta:p},s=function(e){var t=e.children,a=Object(i.a)(e,["children"]);return Object(b.b)(r.a,Object(n.a)({meta:p},a),t)};function d(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(b.b)(s,Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"useexpanded"},Object(b.b)("inlineCode",{parentName:"h1"},"useExpanded"),Object(b.b)("a",Object(n.a)({parentName:"h1"},{href:"#useexpanded",title:"Direct link to heading",className:"anchor"}),Object(b.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"Plugin Hook"),Object(b.b)("li",{parentName:"ul"},"Optional")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"useExpanded")," is the hook that implements ",Object(b.b)("strong",{parentName:"p"},"row expanding"),". It is most often used with ",Object(b.b)("inlineCode",{parentName:"p"},"useGroupBy")," to expand grouped rows or on its own with nested ",Object(b.b)("inlineCode",{parentName:"p"},"subRows")," in tree-like ",Object(b.b)("inlineCode",{parentName:"p"},"data")," sets, but is not limited to these use-cases. It supports expanding rows both via internal table state and also via a hard-coded key on the raw row model."),Object(b.b)("h3",{id:"table-options"},"Table Options",Object(b.b)("a",Object(n.a)({parentName:"h3"},{href:"#table-options",title:"Direct link to heading",className:"anchor"}),Object(b.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(b.b)("p",null,"The following options are supported via the main options object passed to ",Object(b.b)("inlineCode",{parentName:"p"},"useTable(options)")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"initialState.expanded: Object<rowId: String, expanded: Bool>"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"Optional"),Object(b.b)("li",{parentName:"ul"},"Must be ",Object(b.b)("strong",{parentName:"li"},"memoized")),Object(b.b)("li",{parentName:"ul"},"An ",Object(b.b)("inlineCode",{parentName:"li"},"object")," of expanded row IDs with boolean property values."),Object(b.b)("li",{parentName:"ul"},"If a row's id is set to true in this object, that row will have an expanded state. For example, if ",Object(b.b)("inlineCode",{parentName:"li"},"{ '3': true }")," was passed as the ",Object(b.b)("inlineCode",{parentName:"li"},"expanded")," state, by default the ",Object(b.b)("strong",{parentName:"li"},"4th row in the original data array")," would be expanded, since it would have that ID"),Object(b.b)("li",{parentName:"ul"},"For nested expansion, you can ",Object(b.b)("strong",{parentName:"li"},"use nested IDs like ",Object(b.b)("inlineCode",{parentName:"strong"},"1.3"))," to expand sub rows. For example, if ",Object(b.b)("inlineCode",{parentName:"li"},"{ '3': true, '3.5': true }")," was passed as the ",Object(b.b)("inlineCode",{parentName:"li"},"expanded")," state, then the ",Object(b.b)("strong",{parentName:"li"},"the 4th row would be expanded, along with the 6th subRow of the 4th row as well"),"."),Object(b.b)("li",{parentName:"ul"},"This information is stored in state since the table is allowed to manipulate the filter through user interaction."))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"getSubRows: Function(row, relativeIndex) => Rows[]"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"Optional"),Object(b.b)("li",{parentName:"ul"},"See the ",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"./useTable#table-options"}),"useTable hook")," for more details"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"manualExpandedKey: String"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"Optional"),Object(b.b)("li",{parentName:"ul"},"Defaults to ",Object(b.b)("inlineCode",{parentName:"li"},"expanded")),Object(b.b)("li",{parentName:"ul"},"This string is used as the key to detect manual expanded state on any given row. For example, if a raw data row like ",Object(b.b)("inlineCode",{parentName:"li"},"{ name: 'Tanner Linsley', friends: [...], expanded: true}")," was detected, it would always be expanded, regardless of state."))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"expandSubRows: Bool"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"Optional"),Object(b.b)("li",{parentName:"ul"},"Defaults to ",Object(b.b)("inlineCode",{parentName:"li"},"true")),Object(b.b)("li",{parentName:"ul"},"If set to ",Object(b.b)("inlineCode",{parentName:"li"},"true"),", expanded rows are rendered along with normal rows."),Object(b.b)("li",{parentName:"ul"},"If set to ",Object(b.b)("inlineCode",{parentName:"li"},"false"),", expanded rows will only be available through their parent row. This could be useful if you are implementing a custom expanded row view."))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"autoResetExpanded: Boolean"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"Defaults to ",Object(b.b)("inlineCode",{parentName:"li"},"true")),Object(b.b)("li",{parentName:"ul"},"When ",Object(b.b)("inlineCode",{parentName:"li"},"true"),", the ",Object(b.b)("inlineCode",{parentName:"li"},"expanded")," state will automatically reset if any of the following conditions are met:",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"data")," is changed"))),Object(b.b)("li",{parentName:"ul"},"To disable, set to ",Object(b.b)("inlineCode",{parentName:"li"},"false")),Object(b.b)("li",{parentName:"ul"},"For more information see the FAQ ",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"../faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes"}),'"How do I stop my table state from automatically resetting when my data changes?"'))))),Object(b.b)("h3",{id:"instance-properties"},"Instance Properties",Object(b.b)("a",Object(n.a)({parentName:"h3"},{href:"#instance-properties",title:"Direct link to heading",className:"anchor"}),Object(b.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(b.b)("p",null,"The following properties are available on the table instance returned from ",Object(b.b)("inlineCode",{parentName:"p"},"useTable")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"rows: Array<Row>"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"An array of ",Object(b.b)("strong",{parentName:"li"},"expanded")," rows."))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"toggleRowExpanded: Function(rowId, isExpanded?)"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"A function to toggle whether a row is expanded or not. The ",Object(b.b)("inlineCode",{parentName:"li"},"isExpanded")," boolean is optional, otherwise it will be a true toggle action"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"toggleAllRowsExpanded: Function(isExpanded?)"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"A function to toggle whether all of the rows in the table are expanded or not. The ",Object(b.b)("inlineCode",{parentName:"li"},"isExpanded")," boolean is optional, otherwise it will be a true toggle action"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isAllRowsExpanded")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"getToggleAllRowsExpandedProps: Function(userProps) => props"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"A prop getter function that returns all necessary props for an element to be clicked and toggle all of the rows expanded or not.")))),Object(b.b)("h3",{id:"row-properties"},"Row Properties",Object(b.b)("a",Object(n.a)({parentName:"h3"},{href:"#row-properties",title:"Direct link to heading",className:"anchor"}),Object(b.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(b.b)("p",null,"The following additional properties are available on every ",Object(b.b)("inlineCode",{parentName:"p"},"row")," object returned by the table instance."),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"isExpanded: Bool"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"If ",Object(b.b)("inlineCode",{parentName:"li"},"true"),", this row is in an expanded state."))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"toggleRowExpanded: Function(?isExpanded: Bool) => void"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"This function will toggle the expanded state of a row between ",Object(b.b)("inlineCode",{parentName:"li"},"true")," and ",Object(b.b)("inlineCode",{parentName:"li"},"false")," or, if an ",Object(b.b)("inlineCode",{parentName:"li"},"isExpanded")," boolean is passed to the function, it will be set as the new ",Object(b.b)("inlineCode",{parentName:"li"},"isExpanded")," value."),Object(b.b)("li",{parentName:"ul"},"Rows with a hard-coded ",Object(b.b)("inlineCode",{parentName:"li"},"manualExpandedKey")," (defaults to ",Object(b.b)("inlineCode",{parentName:"li"},"expanded"),") set to ",Object(b.b)("inlineCode",{parentName:"li"},"true")," are not affected by this function or the internal expanded state.")))),Object(b.b)("h3",{id:"example"},"Example",Object(b.b)("a",Object(n.a)({parentName:"h3"},{href:"#example",title:"Direct link to heading",className:"anchor"}),Object(b.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/tannerlinsley/react-table/tree/v7/examples/expanding"}),"Source")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"https://codesandbox.io/s/github/tannerlinsley/react-table/tree/v7/examples/expanding"}),"Open in CodeSandbox"))))}d.isMDXComponent=!0}},[["E/Ri",0,2,1,3,4]]]);