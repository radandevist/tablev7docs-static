_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[21],{"+bPh":function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/api/useRowState",function(){return a("2tn3")}])},"2tn3":function(e,t,a){"use strict";a.r(t),a.d(t,"meta",(function(){return c})),a.d(t,"default",(function(){return u}));var n=a("HALo"),i=a("dhJC"),l=a("q1tI"),b=a.n(l),r=a("7ljp"),o=a("er9C"),c=(b.a.createElement,{}),p={meta:c},s=function(e){var t=e.children,a=Object(i.a)(e,["children"]);return Object(r.b)(o.a,Object(n.a)({meta:c},a),t)};function u(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)(s,Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"userowstate"},Object(r.b)("inlineCode",{parentName:"h1"},"useRowState"),Object(r.b)("a",Object(n.a)({parentName:"h1"},{href:"#userowstate",title:"Direct link to heading",className:"anchor"}),Object(r.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Plugin Hook"),Object(r.b)("li",{parentName:"ul"},"Optional")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"useRowState")," is a plugin hook that implements ",Object(r.b)("strong",{parentName:"p"},"basic state management for ",Object(r.b)("em",{parentName:"strong"},"prepared")," rows and their cells"),"."),Object(r.b)("h3",{id:"table-options"},"Table Options",Object(r.b)("a",Object(n.a)({parentName:"h3"},{href:"#table-options",title:"Direct link to heading",className:"anchor"}),Object(r.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(r.b)("p",null,"The following options are supported via the main options object passed to ",Object(r.b)("inlineCode",{parentName:"p"},"useTable(options)")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"initialState.rowState: Object<RowPathKey:Object<any, cellState: {columnId: Object}>>"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Optional"),Object(r.b)("li",{parentName:"ul"},"Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"{}")),Object(r.b)("li",{parentName:"ul"},"If a row's ID is found in this array, it will have the state of the value corresponding to that key."),Object(r.b)("li",{parentName:"ul"},"Individual row states can contain anything, but they also contain a ",Object(r.b)("inlineCode",{parentName:"li"},"cellState")," key, which provides cell-level state based on column ID's to every\n",Object(r.b)("strong",{parentName:"li"},"prepared")," cell in the table."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"initialRowStateAccessor: Function(row) => Object<any>"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Optional"),Object(r.b)("li",{parentName:"ul"},"Defaults to: ",Object(r.b)("inlineCode",{parentName:"li"},"row => ({})")),Object(r.b)("li",{parentName:"ul"},"This function should return the initial state for a row."),Object(r.b)("li",{parentName:"ul"},"If this function is defined, it will be passed a ",Object(r.b)("inlineCode",{parentName:"li"},"Row")," object, from which you can return a value to use as the initial state, eg. ",Object(r.b)("inlineCode",{parentName:"li"},"row => row.original.initialState")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"initialCellStateAccessor: Function(cell) => Object<any>"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Optional")),Object(r.b)("li",{parentName:"ul"},"Defaults to: ",Object(r.b)("inlineCode",{parentName:"li"},"cell => ({})")),Object(r.b)("li",{parentName:"ul"},"This function should return the initial state for a cell."),Object(r.b)("li",{parentName:"ul"},"If this function is defined, it will be passed a ",Object(r.b)("inlineCode",{parentName:"li"},"Cell")," object, from which you can return a value to use as the initial state, eg. ",Object(r.b)("inlineCode",{parentName:"li"},"cell => cell.row.original.initialCellState[cell.column.id]")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"autoResetRowState: Boolean"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Defaults to ",Object(r.b)("inlineCode",{parentName:"li"},"true")),Object(r.b)("li",{parentName:"ul"},"When ",Object(r.b)("inlineCode",{parentName:"li"},"true"),", the ",Object(r.b)("inlineCode",{parentName:"li"},"rowState")," state will automatically reset if any of the following conditions are met:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"data")," is changed"))),Object(r.b)("li",{parentName:"ul"},"To disable, set to ",Object(r.b)("inlineCode",{parentName:"li"},"false")),Object(r.b)("li",{parentName:"ul"},"For more information see the FAQ ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"../faq#how-do-i-stop-my-table-state-from-automatically-resetting-when-my-data-changes"}),'"How do I stop my table state from automatically resetting when my data changes?"'))))),Object(r.b)("h3",{id:"instance-properties"},"Instance Properties",Object(r.b)("a",Object(n.a)({parentName:"h3"},{href:"#instance-properties",title:"Direct link to heading",className:"anchor"}),Object(r.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(r.b)("p",null,"The following values are provided to the table ",Object(r.b)("inlineCode",{parentName:"p"},"instance"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"setRowState: Function(rowPath: Array<string>, updater: Function | Any) => void"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Use this function to programmatically update the state of a row."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"updater")," can be a function or value. If a ",Object(r.b)("inlineCode",{parentName:"li"},"function")," is passed, it will receive the current value and expect a new one to be returned."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"setCellState: Function(rowPath: Array<string>, columnId: String, updater: Function | Any) => void"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Use this function to programmatically update the cell of a row."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"updater")," can be a function or value. If a ",Object(r.b)("inlineCode",{parentName:"li"},"function")," is passed, it will receive the current value and expect a new one to be returned.")))),Object(r.b)("h3",{id:"row-properties"},"Row Properties",Object(r.b)("a",Object(n.a)({parentName:"h3"},{href:"#row-properties",title:"Direct link to heading",className:"anchor"}),Object(r.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(r.b)("p",null,"The following additional properties are available on every ",Object(r.b)("strong",{parentName:"p"},"prepared")," ",Object(r.b)("inlineCode",{parentName:"p"},"row")," object returned by the table instance."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"state: Object"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"This is the state object for each row, pre-mapped to the row from the table state's ",Object(r.b)("inlineCode",{parentName:"li"},"rowState")," object via ",Object(r.b)("inlineCode",{parentName:"li"},"rowState[row.id]")),Object(r.b)("li",{parentName:"ul"},"May also contain a ",Object(r.b)("inlineCode",{parentName:"li"},"cellState")," key/value pair, which is used to provide individual cell states to this row's cells"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"setState: Function(updater: Function | any)"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Use this function to programmatically update the state of a row."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"updater")," can be a function or value. If a ",Object(r.b)("inlineCode",{parentName:"li"},"function")," is passed, it will receive the current value and expect a new one to be returned.")))),Object(r.b)("h3",{id:"cell-properties"},"Cell Properties",Object(r.b)("a",Object(n.a)({parentName:"h3"},{href:"#cell-properties",title:"Direct link to heading",className:"anchor"}),Object(r.b)("span",Object(n.a)({parentName:"a"},{className:"icon icon-link"})))),Object(r.b)("p",null,"The following additional properties are available on every ",Object(r.b)("inlineCode",{parentName:"p"},"Cell")," object returned in an array of ",Object(r.b)("inlineCode",{parentName:"p"},"cells")," on every row object."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"state: Object"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"This is the state object for each cell, pre-mapped to the cell from the table state's ",Object(r.b)("inlineCode",{parentName:"li"},"rowState")," object via ",Object(r.b)("inlineCode",{parentName:"li"},"rowState[row.id].cellState[columnId]")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"setState: Function(updater: Function | any)"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Use this function to programmatically update the state of a cell."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"updater")," can be a function or value. If a ",Object(r.b)("inlineCode",{parentName:"li"},"function")," is passed, it will receive the current value and expect a new one to be returned.")))))}u.isMDXComponent=!0}},[["+bPh",0,2,1,3,4]]]);